image:
  repo: null
  tag: null

dnsName: # whitelisted in Nifi cluster

ingress:
  enabled: false
  # Google Cloud Static External IP Address Name
  staticIpAddressName:

admin:
  identity:
  name:

oidc: # Google Cloud OAuth 2.0 Client ID for Web Application
  discoveryUrl: https://accounts.google.com/.well-known/openid-configuration
  clientId:
  secret:

# https://nifi.apache.org/docs/nifi-docs/html/administration-guide.html#security_properties
nifiSensitivePropsKey:

nifiNodes: 1

resources:
  limits:
    cpu: 750m
    memory: 2Gi
    storage: 4Gi
  requests:
    cpu: 250m
    memory: 1Gi
    storage: 4Gi

persistence:
  logs:
    storageClass: standard-rwo
    size: 1Gi
    path: "/opt/nifi/nifi-current/logs"
  data:
    storageClass: standard-rwo
    size: 1Gi
    path: "/opt/nifi/data"
  flowFileRepo:
    storageClass: standard-rwo
    size: 1Gi
    path: "/opt/nifi/flowfile_repository"
  conf:
    storageClass: standard-rwo
    size: 1Gi
    path: "/opt/nifi/nifi-current/conf"
  contentRepo:
    storageClass: standard-rwo
    size: 1Gi
    path: "/opt/nifi/content_repository"
  provenanceRepo:
    storageClass: standard-rwo
    size: 1Gi
    path: "/opt/nifi/provenance_repository"
  extensionsRepo:
    storageClass: standard-rwo
    size: 1Gi
    path: "/opt/nifi/extensions"

calleido-deps:
  cert-manager:
    installCRDs: false
    image:
      repository: eu.gcr.io/prj-cogniflare-marketpl-public/cert-manager/cert-manager-controller
      tag: v1.10.1
    extraArgs:
      - --namespace=calleido
    replicaCount: 1
    global:
      leaderElection:
        namespace: calleido
    resources:
      limits:
        cpu: 100m
        memory: 64Mi
      requests:
        cpu: 100m
        memory: 64Mi
    webhook:
      resources:
        limits:
          cpu: 50m
          memory: 32Mi
        requests:
          cpu: 50m
          memory: 32Mi
      image:
        repository: eu.gcr.io/prj-cogniflare-marketpl-public/cert-manager/cert-manager-webhook
        tag: v1.10.1
    cainjector:
      resources:
        limits:
          cpu: 100m
          memory: 64Mi
        requests:
          cpu: 100m
          memory: 64Mi
      image:
        repository: eu.gcr.io/prj-cogniflare-marketpl-public/cert-manager/cert-manager-cainjector
        tag: v1.10.1
    startupapicheck:
      enabled: false

  nifikop:
    reportingSecret: "nifikop-reporting-secret"
    bilingSidecarImage: "gcr.io/cloud-marketplace-tools/metering/ubbagent:latest"
    image:
      repository: eu.gcr.io/prj-cogniflare-marketpl-public/nifikop/nifikop
      tag: 1.0.0-cogniflare0
    namespaces:
      - calleido
    logLevel: Debug
    resources:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 128Mi
    sidecars:
    - image: '{{ .Values.bilingSidecarImage }}'
      name: ubbagent
      env:
      - name: AGENT_CONFIG_FILE
        value: /etc/ubbagent/config.yaml
      - name: AGENT_LOCAL_PORT
        value: "6080"
#      - name: AGENT_STATE_DIR
#        value: /data/ubbagent
      - name: AGENT_ENCODED_KEY
        valueFrom:
          secretKeyRef:
            name: '{{ .Values.reportingSecret }}'
            key: reporting-key
      - name: AGENT_CONSUMER_ID
        valueFrom:
          secretKeyRef:
            name: '{{ .Values.reportingSecret }}'
            key: consumer-id
      securityContext:
        runAsUser: 0
        allowPrivilegeEscalation: false
      volumeMounts:
      - name: ubbagent-config
        mountPath: /etc/ubbagent
#      - name: ubbagent-state
#        mountPath: /data/ubbagent
    extraVolumes:
    - name: ubbagent-config
      configMap:
        name: '{{ template "nifikop.name" . }}-ubbagent-config'
#    - name: ubbagent-state
#      persistentVolumeClaim:
#        claimName: '{{ template "nifikop.name" . }}-ubbagent-billing'
    extraDeploy:
#    - apiVersion: v1
#      kind: PersistentVolumeClaim
#      metadata:
#        name: '{{ template "nifikop.name" . }}-ubbagent-billing'
#      spec:
#        accessModes: [ReadWriteOnce]
#        storageClassName: {{ .Values.zookeeper.persistence.storageClass }}
#        resources:
#          requests:
#            storage: 2Gi
    - apiVersion: v1
      kind: ConfigMap
      metadata:
        name: '{{ template "nifikop.name" . }}-ubbagent-config'
      data:
        config.yaml: |
          # The identity section contains authentication information used
          # by the agent.
          identities:
          - name: gcp
            gcp:
              # This parameter accepts a base64-encoded JSON service
              # account key. The value comes from the reporting secret.
              encodedServiceAccountKey: $AGENT_ENCODED_KEY

          # The metrics section defines the metric that will be reported.
          # Metric names should match verbatim the identifiers created
          # during pricing setup.
          metrics:
          # The agent is able to automatically send instance time usage
          # reports, configured in the "source" section.
          - name: basic_vcpu_hour
            type: int
            endpoints:
            - name: on_disk
            - name: servicecontrol

            # The passthrough marker indicates that no aggregation should
            # occur for this metric. Reports received are immediately sent
            # to the reporting endpoint. We use passthrough for the
            # instance_time metric since reports are generated
            # automatically by a heartbeat source defined in a later
            # section.
            passthrough: {}

          # The endpoints section defines where metering data is ultimately
          # sent. Currently supported endpoints include:
          # * disk - some directory on the local filesystem
          # * servicecontrol - Google Service Control
          endpoints:
          - name: on_disk
            # The disk endpoint is useful for debugging, but its inclusion
            # is not necessary in a production deployment.
            disk:
              reportDir: /var/lib/ubbagent/reports
              expireSeconds: 3600
          - name: servicecontrol
            servicecontrol:
              identity: gcp
              # The service name is unique to your application and will be
              # provided during onboarding.
              serviceName: calleido.endpoints.prj-cogniflare-marketpl-public.cloud.goog
              consumerId: $AGENT_CONSUMER_ID  # From the reporting secret.

          # The sources section lists metric data sources run by the agent
          # itself - omit it if usage reports for all metrics are reported by
          # the application. The currently supported source is 'heartbeat', which
          # sends a defined value to a metric at a defined interval. In the
          # following example, the heartbeat sends a 60-second value (defined by
          # 'int64Value') through the "instance_time" metric every minute
          # (defined by 'intervalSeconds'); this is assuming that the metric
          # configured in service control has 'seconds' as its unit.
          #
          # IMPORTANT: The unit of the metric is specified in the backend, not here,
          # so care must be taken to ensure that the reported value and the unit match.
          # For example, if the unit is defined to be minutes in the backend, a report
          # value of 60 will mean 60 minutes, which means, for the same configuration,
          # we accidentally inflate the reported usage by 60 times! In this case,
          # where the unit is minute, the correct value should be 1.
          #
          # NOTE: 'intervalSeconds' should not be too short to avoid excessive
          # reporting; it should not be too long to avoid missing events in case of
          # unexpected restarts. The recommended value is 1 minute, or 60 seconds.
          sources:
          - name: instance_time_heartbeat
            heartbeat:
              metric: basic_vcpu_hour
              intervalSeconds: 60
              value:
                int64Value: 60

  zookeeper:
    replicaCount: 1
    image:
      registry: eu.gcr.io
      repository: prj-cogniflare-marketpl-public/zookeeper/zookeeper
      tag: 3.8.0-debian-11-r56
    persistence:
      storageClass: standard-rwo
      size: 8Gi
    networkPolicy:
      enabled: true
    resources:
      limits:
        cpu: 250m
        memory: 1024Mi
      requests:
        cpu: 250m
        memory: 512Mi
