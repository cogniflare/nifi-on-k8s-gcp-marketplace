apiVersion: nifi.konpyutaika.com/v1
kind: NifiCluster
metadata:
  name: {{ .Release.Name }}
spec:
  service:
    headlessEnabled: true
  zkAddress: {{ .Release.Name }}-zookeeper:2181
  zkPath: /calleido-nifi
  clusterImage: "{{ .Values.image.repo }}:{{ .Values.image.tag }}"
  initContainerImage: bash:5.2.2
  oneNifiNodePerNode: false
  managedAdminUsers:
  {{- .Values.initialAdminUsers | toYaml | nindent 4 }}
  readOnlyConfig:
    nifiProperties:
      webProxyHosts:
        - {{ .Values.dnsName }}
      overrideConfigs: |
        nifi.sensitive.props.key={{ .Values.nifiSensitivePropsKey }}
        nifi.security.user.oidc.discovery.url={{ .Values.oidc.discoveryUrl }}
        nifi.security.user.oidc.client.id={{ .Values.oidc.clientId }}
        nifi.security.user.oidc.client.secret={{ .Values.oidc.secret }}
        nifi.security.identity.mapping.pattern.dn=CN=([^,]*)(?:, (?:O|OU)=.*)?
        nifi.security.identity.mapping.value.dn=$1
        nifi.security.identity.mapping.transform.dn=NONE
  nodeConfigGroups:
    default_group:
      podMetadata:
        labels:
          nifi_nodegroup: default
      imagePullPolicy: IfNotPresent
      isNode: true
      serviceAccountName: default
      storageConfigs:
        - mountPath: /opt/nifi/nifi-current/logs
          name: logs
          pvcSpec:
            accessModes:
              - ReadWriteOnce
            storageClassName: standard-rwo
            resources:
              requests:
                storage: 1Gi
        - mountPath: /opt/nifi/data
          name: data
          pvcSpec:
            accessModes:
              - ReadWriteOnce
            storageClassName: standard-rwo
            resources:
              requests:
                storage: 1Gi
        - mountPath: /opt/nifi/flowfile_repository
          name: flowfile-repository
          pvcSpec:
            accessModes:
              - ReadWriteOnce
            storageClassName: standard-rwo
            resources:
              requests:
                storage: 1Gi
        - mountPath: /opt/nifi/nifi-current/conf
          name: conf
          pvcSpec:
            accessModes:
              - ReadWriteOnce
            storageClassName: standard-rwo
            resources:
              requests:
                storage: 1Gi
        - mountPath: /opt/nifi/content_repository
          name: content-repository
          pvcSpec:
            accessModes:
              - ReadWriteOnce
            storageClassName: standard-rwo
            resources:
              requests:
                storage: 1Gi
        - mountPath: /opt/nifi/provenance_repository
          name: provenance-repository
          pvcSpec:
            accessModes:
              - ReadWriteOnce
            storageClassName: standard-rwo
            resources:
              requests:
                storage: 1Gi
        - mountPath: /opt/nifi/extensions
          name: extensions-repository
          pvcSpec:
            accessModes:
              - ReadWriteOnce
            storageClassName: standard-rwo
            resources:
              requests:
                storage: 1Gi
      resourcesRequirements:
        limits:
          cpu: 750m
          memory: 2Gi
          ephemeral-storage: 4Gi
        requests:
          cpu: 250m
          memory: 1Gi
          ephemeral-storage: 4Gi
  nodes:
  {{- range until (int .Values.nifiNodes) }}
    - id: {{ . }}
      nodeConfigGroup: default_group
  {{- end }}
  propagateLabels: true
  nifiClusterTaskSpec:
    retryDurationMinutes: 10
  listenersConfig:
    internalListeners:
      - containerPort: 8443
        type: https
        name: https
      - containerPort: 6007
        type: cluster
        name: cluster
      - containerPort: 10000
        type: s2s
        name: s2s
      - containerPort: 9090
        type: prometheus
        name: prometheus
      - containerPort: 6342
        type: load-balance
        name: load-balance
    sslSecrets:
      create: true
  externalServices:
    - name: {{ .Release.Name }}-cluster
      metadata:
        annotations:
          cloud.google.com/app-protocols: '{"https":"HTTPS"}'
      spec:
        type: NodePort
        portConfigs:
          - port: 8443
            internalListenerName: https
